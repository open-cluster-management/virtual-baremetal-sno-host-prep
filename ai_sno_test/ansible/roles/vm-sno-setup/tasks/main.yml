

- name: set mac address and host name of the vm
  set_fact:
    vm_mac_address: "{{ vm_mac_address_prefix }}:{{ vm_mac_host_index }}:{{ vm_mac_vm_index }}"
    vm_name: "vm-{{ vm_mac_host_index }}-{{ vm_mac_vm_index }}"

- name: verify all variables
  debug:
    msg:
    - "vm_vnc_port: {{vm_vnc_port}}"
    - "vm_mac_vm_index: {{vm_mac_vm_index}}"
    - "vm_mac_host_index: {{vm_mac_host_index}}"
    - "vmhost_name: {{vmhost_name}}"
    - "use_nvme: {{use_nvme}}"
    - "vm_name: {{vm_name}}"

- name: create work directory on the vm host
  file:
    path: "{{ vmhost_config_dir }}/{{vm_name}}"
    state: directory

- name: select disk folder base nvme or sda 
  set_fact:
    sno_vm_disk_dir: "{% if ( (hostvars[inventory_hostname].enable_nvme == 'true' )  and use_nvme ) %}{{nvme_mount_path}}/libvirt/images{% else %}/var/lib/libvirt/images{% endif %}"

- name: debug disk folder
  debug:
    msg: "sno_vm_disk_dir: {{sno_vm_disk_dir}}"

- name: make sure disk directory exists on the vm host
  file:
    path: "{{ sno_vm_disk_dir }}"
    state: directory

- name: check if disk file exists
  stat: 
    path: "{{sno_vm_disk_dir}}/{{vm_name}}.qcow2"
  register: disk_file_stat

- name: Create disk for sno cluster
  shell: |
    qemu-img create -f qcow2 "{{sno_vm_disk_dir}}/{{vm_name}}.qcow2" {{vm_disk}}G
  when: disk_file_stat.stat.exists == false

- name: Create xml for sno cluster
  template:
    src: kvm-def.xml.j2
    dest: "{{ vmhost_config_dir }}/{{vm_name}}/kvm-def.xml"

- name: Create vm from xml
  shell: |
    virsh define "{{ vmhost_config_dir }}/{{vm_name}}/kvm-def.xml"
  ignore_errors: yes

- name: Get uuid
  shell: |
    virsh domuuid {{vm_name}}
  register: result

- name: Set global with vm uuid
  set_fact:
    sno_vm_uuid: "{{ result.stdout }}"

- name: debug uuid
  debug:
    msg: "{{ sno_vm_uuid }}"

- name: get ip address
  set_fact: 
    vmhost_public_ip: "{{ public_ip_network | next_nth_usable(public_ip_network_node_start  +  hostvars[inventory_hostname].offset) }}"

- name: debug public ip
  debug:
    msg: "{{ vmhost_public_ip }}"

- name: set bmc url
  set_fact:
    bmc_url: "redfish-virtualmedia+http://{{vmhost_public_ip}}:{{vmhost_bmc_port}}/redfish/v1/Systems/{{ sno_vm_uuid }}"

- name: verify we can access uuid from bmc
  uri:
    url: "http://{{vmhost_public_ip}}:{{vmhost_bmc_port}}/redfish/v1/Systems/{{ sno_vm_uuid }}"
    method: Get
    validate_certs: no
    return_content: yes
  register: webpage

- name: debug web return
  debug:
    msg: "{{webpage}}"

- name: set variables for inventory
  set_fact:
    vm_inventory: "{{vm_inventory|default([]) + [{'host_name': vm_name, 'mac_addr': vm_mac_address, 'bmc_url': bmc_url }] }}"
