- name: Creates directory for dns server yaml
  file:
    path: "{{ hub_config_dir }}/{{sno_cluster_name}}"
    state: directory

- name: Get pull secret & private key & public key
  set_fact:
    sno_pull_secret_base64: "{{ lookup('file', pull_secret_path) | b64encode }}"
    sno_public_key: "{{ lookup('file', ssh_pulic_key_path) }}"
    sno_private_key_base64: "{{ lookup('file', ssh_private_key_path) | b64encode }}"

- name: create yamls
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
  - src: bmh-secret.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/bmh-secret.yaml"
  - src: clusterdeployment.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/clusterdeployment.yaml"
  - src: klusterletaddonconfig.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/klusterletaddonconfig.yaml"
  - src: managedcluster.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/managedcluster.yaml"
  - src: namespace.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/namespace.yaml"
  - src: nmstate.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/nmstate.yaml"
  - src: private-key.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/private-key.yaml"
  - src: pull-secret.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/pull-secret.yaml"
  - src: infraenv.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/infraenv.yaml"

- name: apply resources
  shell: 
    KUBECONFIG="{{ hub_kubeconfig_path }}" oc apply -f {{ item }} 
  with_items:
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/namespace.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/bmh-secret.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/nmstate.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/private-key.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/pull-secret.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/clusterdeployment.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/klusterletaddonconfig.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/managedcluster.yaml"
  - "{{ hub_config_dir }}/{{sno_cluster_name}}/infraenv.yaml"

- name: Get Image URL
  shell: |
    KUBECONFIG={{ hub_kubeconfig_path }} oc get infraenv {{sno_cluster_name}} -n {{sno_cluster_name}} -ojsonpath='{.status.isoDownloadURL}'
  register: result
  until: result.stdout != ""
  retries: 60
  delay: 2

- name: set image URL variable
  set_fact:
    sno_image_url: "{{result.stdout}}"

- name: generate BareMetalHost
  template:
    src: baremetalhost.yaml.j2
    dest: "{{ hub_config_dir }}/{{sno_cluster_name}}/baremetalhost.yaml"

- name: apply baremetalhost
  shell: |
    KUBECONFIG="{{ hub_kubeconfig_path }}" oc apply -f "{{ hub_config_dir }}/{{sno_cluster_name}}/baremetalhost.yaml"

- name: wait for discovery (agent should be generated)
  shell: test "$(oc get agent -n {{sno_cluster_name}} | grep -v NAME | wc -l)" -gt 0
  retries: 60
  delay: 5
  register: result
  until: result.rc == 0

# - name: set boot from Hdd
#   uri:
#     # url: "http://{{hostvars[vmhost_name]['vmhost_public_ip']}}:{{vmhost_bmc_port}}/redfish/v1/Systems/{{ hostvars[vmhost_name]['sno_vm_uuid'] }}"
#     url: "http://{{vmhost_name}}:{{vmhost_bmc_port}}/redfish/v1/Systems/{{ hostvars[vmhost_name]['sno_vm_uuid'] }}"
#     method: PATCH
#     headers:
#       content-type: application/json
#       Accept: application/json
#     body: '{"Boot":{"BootSourceOverrideEnabled":"Continuous","BootSourceOverrideTarget":"Hdd"}}'
#     body_format: json
#     return_content: yes
#     status_code: [200, 204]

#use hostalias for now :)
#TODO: use dns in future
# - name: check if has hostalias already
#   shell: |
#     KUBECONFIG={{ hub_kubeconfig_path }} oc get deployment -n open-cluster-management managedcluster-import-controller-v2 -oyaml | grep "api.{{sno_cluster_name}}.{{sno_cluster_name_domain}}"
#   register: result
#   ignore_errors: yes

# - name: debug the lines will be added
#   debug:
#     msg: 'KUBECONFIG={{ hub_kubeconfig_path }} oc get deployment -n open-cluster-management managedcluster-import-controller-v2 -oyaml | sed "s/      hostAliases:/      hostAliases:\n      - ip: {{ public_ip_network | next_nth_usable(public_ip_vm_start  + public_ip_vm_offset ) }}\n        hostnames:\n        - api.{{sno_cluster_name}}.{{sno_cluster_name_domain}}/g"'
# - name: append hostalias in managedcluster-import-controller-v2
#   shell: |
#     KUBECONFIG={{ hub_kubeconfig_path }} oc get deployment -n open-cluster-management managedcluster-import-controller-v2 -oyaml | sed "s/      hostAliases:/      hostAliases:\n      - ip: {{ public_ip_network | next_nth_usable(public_ip_vm_start  + public_ip_vm_offset ) }}\n        hostnames:\n        - api.{{sno_cluster_name}}.{{sno_cluster_name_domain}}/g" | KUBECONFIG={{ hub_kubeconfig_path }} oc apply -f -
#   when: result.rc != 0

