- name: Creates directory for obs yaml
  file:
    path: "{{ hub_config_dir }}/obs"
    state: directory

- name: Get cluster pull-secret
  shell: |
    KUBECONFIG={{ hub_kubeconfig_path }} oc get secret -n open-cluster-management multiclusterhub-operator-pull-secret -o json
  register: cluster_pull_secret

- name: Convert cluster_pull_secret to json
  set_fact:
    cluster_pull_secret_json: "{{ cluster_pull_secret['stdout'] | from_json }}"

- name: Get pull secret & private key & public key
  set_fact:
    obs_pull_secret_base64: "{{ cluster_pull_secret_json['data']['.dockerconfigjson'] }}"

- name: Create ns
  shell: |
    KUBECONFIG={{ hub_kubeconfig_path }} oc create namespace open-cluster-management-observability
  ignore_errors: yes

- name: Create pull secret
  shell: |
    KUBECONFIG={{ hub_kubeconfig_path }} oc create secret generic multiclusterhub-operator-pull-secret \
    -n open-cluster-management-observability \
    --from-literal=.dockerconfigjson="{{obs_pull_secret_base64}}" \
    --type=kubernetes.io/dockerconfigjson

- name: create yamls
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
  - src: thanos-object-storage.yaml.j2
    dest: "{{ hub_config_dir }}/obs/thanos-object-storage.yaml"
  - src: multiclusterobservability_cr.yaml.j2
    dest: "{{ hub_config_dir }}/obs/multiclusterobservability_cr.yaml"

- name: apply resources
  shell:
    KUBECONFIG="{{ hub_kubeconfig_path }}" oc apply -f {{ item }}
  with_items:
  - "{{ hub_config_dir }}/obs/thanos-object-storage.yaml"
  - "{{ hub_config_dir }}/obs/multiclusterobservability_cr.yaml"
